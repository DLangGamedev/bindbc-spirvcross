/*
Copyright (c) 2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.spirvcross.funcs;

import bindbc.spirvcross.signatures;

__gshared
{
    f_spvc_get_version spvc_get_version;
    
    f_spvc_get_commit_revision_and_timestamp spvc_get_commit_revision_and_timestamp;
    
    f_spvc_msl_vertex_attribute_init spvc_msl_vertex_attribute_init;
    f_spvc_msl_shader_interface_var_init spvc_msl_shader_interface_var_init;
    f_spvc_msl_shader_input_init spvc_msl_shader_input_init;
    f_spvc_msl_shader_interface_var_init_2 spvc_msl_shader_interface_var_init_2;
    f_spvc_msl_resource_binding_init spvc_msl_resource_binding_init;
    f_spvc_msl_resource_binding_init_2 spvc_msl_resource_binding_init_2;
    f_spvc_msl_get_aux_buffer_struct_version spvc_msl_get_aux_buffer_struct_version;
    f_spvc_msl_constexpr_sampler_init spvc_msl_constexpr_sampler_init;
    f_spvc_msl_sampler_ycbcr_conversion_init spvc_msl_sampler_ycbcr_conversion_init;
    f_spvc_hlsl_resource_binding_init spvc_hlsl_resource_binding_init;
    
    f_spvc_context_create spvc_context_create;
    f_spvc_context_destroy spvc_context_destroy;

    f_spvc_context_release_allocations spvc_context_release_allocations;
    f_spvc_context_get_last_error_string spvc_context_get_last_error_string;
    f_spvc_context_set_error_callback spvc_context_set_error_callback;
    
    f_spvc_context_parse_spirv spvc_context_parse_spirv;
    f_spvc_context_create_compiler spvc_context_create_compiler;

    f_spvc_compiler_get_current_id_bound spvc_compiler_get_current_id_bound;
    f_spvc_compiler_create_compiler_options spvc_compiler_create_compiler_options;
    f_spvc_compiler_options_set_bool spvc_compiler_options_set_bool;
    f_spvc_compiler_options_set_uint spvc_compiler_options_set_uint;
    f_spvc_compiler_install_compiler_options spvc_compiler_install_compiler_options;
    f_spvc_compiler_compile spvc_compiler_compile;
    f_spvc_compiler_add_header_line spvc_compiler_add_header_line;
    f_spvc_compiler_require_extension spvc_compiler_require_extension;
    f_spvc_compiler_get_num_required_extensions spvc_compiler_get_num_required_extensions;
    f_spvc_compiler_get_required_extension spvc_compiler_get_required_extension;
    f_spvc_compiler_flatten_buffer_block spvc_compiler_flatten_buffer_block;
    f_spvc_compiler_variable_is_depth_or_compare spvc_compiler_variable_is_depth_or_compare;
    f_spvc_compiler_mask_stage_output_by_location spvc_compiler_mask_stage_output_by_location;
    f_spvc_compiler_mask_stage_output_by_builtin spvc_compiler_mask_stage_output_by_builtin;
    f_spvc_compiler_hlsl_set_root_constants_layout spvc_compiler_hlsl_set_root_constants_layout;
    f_spvc_compiler_hlsl_add_vertex_attribute_remap spvc_compiler_hlsl_add_vertex_attribute_remap;
    f_spvc_compiler_hlsl_remap_num_workgroups_builtin spvc_compiler_hlsl_remap_num_workgroups_builtin;
    f_spvc_compiler_hlsl_set_resource_binding_flags spvc_compiler_hlsl_set_resource_binding_flags;
    f_spvc_compiler_hlsl_add_resource_binding spvc_compiler_hlsl_add_resource_binding;
    f_spvc_compiler_hlsl_is_resource_used spvc_compiler_hlsl_is_resource_used;
    f_spvc_compiler_msl_is_rasterization_disabled spvc_compiler_msl_is_rasterization_disabled;
    f_spvc_compiler_msl_needs_aux_buffer spvc_compiler_msl_needs_aux_buffer;
    f_spvc_compiler_msl_needs_swizzle_buffer spvc_compiler_msl_needs_swizzle_buffer;
    f_spvc_compiler_msl_needs_buffer_size_buffer spvc_compiler_msl_needs_buffer_size_buffer;
    f_spvc_compiler_msl_needs_output_buffer spvc_compiler_msl_needs_output_buffer;
    f_spvc_compiler_msl_needs_patch_output_buffer spvc_compiler_msl_needs_patch_output_buffer;
    f_spvc_compiler_msl_needs_input_threadgroup_mem spvc_compiler_msl_needs_input_threadgroup_mem;
    f_spvc_compiler_msl_add_vertex_attribute spvc_compiler_msl_add_vertex_attribute;
    f_spvc_compiler_msl_add_resource_binding spvc_compiler_msl_add_resource_binding;
    f_spvc_compiler_msl_add_resource_binding_2 spvc_compiler_msl_add_resource_binding_2;
    f_spvc_compiler_msl_add_shader_input spvc_compiler_msl_add_shader_input;
    f_spvc_compiler_msl_add_shader_input_2 spvc_compiler_msl_add_shader_input_2;
    f_spvc_compiler_msl_add_shader_output spvc_compiler_msl_add_shader_output;
    f_spvc_compiler_msl_add_shader_output_2 spvc_compiler_msl_add_shader_output_2;
    f_spvc_compiler_msl_add_discrete_descriptor_set spvc_compiler_msl_add_discrete_descriptor_set;
    f_spvc_compiler_msl_set_argument_buffer_device_address_space spvc_compiler_msl_set_argument_buffer_device_address_space;
    f_spvc_compiler_msl_is_vertex_attribute_used spvc_compiler_msl_is_vertex_attribute_used;
    f_spvc_compiler_msl_is_shader_input_used spvc_compiler_msl_is_shader_input_used;
    f_spvc_compiler_msl_is_shader_output_used spvc_compiler_msl_is_shader_output_used;
    f_spvc_compiler_msl_is_resource_used spvc_compiler_msl_is_resource_used;
    f_spvc_compiler_msl_remap_constexpr_sampler spvc_compiler_msl_remap_constexpr_sampler;
    f_spvc_compiler_msl_remap_constexpr_sampler_by_binding spvc_compiler_msl_remap_constexpr_sampler_by_binding;
    f_spvc_compiler_msl_remap_constexpr_sampler_ycbcr spvc_compiler_msl_remap_constexpr_sampler_ycbcr;
    f_spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr;
    f_spvc_compiler_msl_set_fragment_output_components spvc_compiler_msl_set_fragment_output_components;
    f_spvc_compiler_msl_get_automatic_resource_binding spvc_compiler_msl_get_automatic_resource_binding;
    f_spvc_compiler_msl_get_automatic_resource_binding_secondary spvc_compiler_msl_get_automatic_resource_binding_secondary;
    f_spvc_compiler_msl_add_dynamic_buffer spvc_compiler_msl_add_dynamic_buffer;
    f_spvc_compiler_msl_add_inline_uniform_block spvc_compiler_msl_add_inline_uniform_block;
    f_spvc_compiler_msl_set_combined_sampler_suffix spvc_compiler_msl_set_combined_sampler_suffix;
    f_spvc_compiler_msl_get_combined_sampler_suffix spvc_compiler_msl_get_combined_sampler_suffix;
    f_spvc_compiler_get_active_interface_variables spvc_compiler_get_active_interface_variables;
    f_spvc_compiler_set_enabled_interface_variables spvc_compiler_set_enabled_interface_variables;
    f_spvc_compiler_create_shader_resources spvc_compiler_create_shader_resources;
    f_spvc_compiler_create_shader_resources_for_active_variables spvc_compiler_create_shader_resources_for_active_variables;
    f_spvc_resources_get_resource_list_for_type spvc_resources_get_resource_list_for_type;
    f_spvc_resources_get_builtin_resource_list_for_type spvc_resources_get_builtin_resource_list_for_type;
    f_spvc_compiler_set_decoration spvc_compiler_set_decoration;
    f_spvc_compiler_set_decoration_string spvc_compiler_set_decoration_string;
    f_spvc_compiler_set_name spvc_compiler_set_name;
    f_spvc_compiler_set_member_decoration spvc_compiler_set_member_decoration;
    f_spvc_compiler_set_member_decoration_string spvc_compiler_set_member_decoration_string;
    f_spvc_compiler_set_member_name spvc_compiler_set_member_name;
    f_spvc_compiler_unset_decoration spvc_compiler_unset_decoration;
    f_spvc_compiler_unset_member_decoration spvc_compiler_unset_member_decoration;
    f_spvc_compiler_has_decoration spvc_compiler_has_decoration;
    f_spvc_compiler_has_member_decoration spvc_compiler_has_member_decoration;
    f_spvc_compiler_get_name spvc_compiler_get_name;
    f_spvc_compiler_get_decoration spvc_compiler_get_decoration;
    f_spvc_compiler_get_decoration_string spvc_compiler_get_decoration_string;
    f_spvc_compiler_get_member_decoration spvc_compiler_get_member_decoration;
    f_spvc_compiler_get_member_decoration_string spvc_compiler_get_member_decoration_string;
    f_spvc_compiler_get_member_name spvc_compiler_get_member_name;
    f_spvc_compiler_get_entry_points spvc_compiler_get_entry_points;
    f_spvc_compiler_set_entry_point spvc_compiler_set_entry_point;
    f_spvc_compiler_rename_entry_point spvc_compiler_rename_entry_point;
    f_spvc_compiler_get_cleansed_entry_point_name spvc_compiler_get_cleansed_entry_point_name;
    f_spvc_compiler_set_execution_mode spvc_compiler_set_execution_mode;
    f_spvc_compiler_unset_execution_mode spvc_compiler_unset_execution_mode;
    f_spvc_compiler_set_execution_mode_with_arguments spvc_compiler_set_execution_mode_with_arguments;
    f_spvc_compiler_get_execution_modes spvc_compiler_get_execution_modes;
    f_spvc_compiler_get_execution_mode_argument spvc_compiler_get_execution_mode_argument;
    f_spvc_compiler_get_execution_mode_argument_by_index spvc_compiler_get_execution_mode_argument_by_index;
    f_spvc_compiler_get_execution_model spvc_compiler_get_execution_model;
    f_spvc_compiler_update_active_builtins spvc_compiler_update_active_builtins;
    f_spvc_compiler_has_active_builtin spvc_compiler_has_active_builtin;
    f_spvc_compiler_get_type_handle spvc_compiler_get_type_handle;
    
    f_spvc_type_get_base_type_id spvc_type_get_base_type_id;
    f_spvc_type_get_basetype spvc_type_get_basetype;
    f_spvc_type_get_bit_width spvc_type_get_bit_width;
    f_spvc_type_get_vector_size spvc_type_get_vector_size;
    f_spvc_type_get_columns spvc_type_get_columns;
    f_spvc_type_get_num_array_dimensions spvc_type_get_num_array_dimensions;
    f_spvc_type_array_dimension_is_literal spvc_type_array_dimension_is_literal;
    f_spvc_type_get_array_dimension spvc_type_get_array_dimension;
    f_spvc_type_get_num_member_types spvc_type_get_num_member_types;
    f_spvc_type_get_member_type spvc_type_get_member_type;
    f_spvc_type_get_storage_class spvc_type_get_storage_class;
    f_spvc_type_get_image_sampled_type spvc_type_get_image_sampled_type;
    f_spvc_type_get_image_dimension spvc_type_get_image_dimension;
    f_spvc_type_get_image_is_depth spvc_type_get_image_is_depth;
    f_spvc_type_get_image_arrayed spvc_type_get_image_arrayed;
    f_spvc_type_get_image_multisampled spvc_type_get_image_multisampled;
    f_spvc_type_get_image_is_storage spvc_type_get_image_is_storage;
    f_spvc_type_get_image_storage_format spvc_type_get_image_storage_format;
    f_spvc_type_get_image_access_qualifier spvc_type_get_image_access_qualifier;
    
    f_spvc_compiler_get_declared_struct_size spvc_compiler_get_declared_struct_size;
    f_spvc_compiler_get_declared_struct_size_runtime_array spvc_compiler_get_declared_struct_size_runtime_array;
    f_spvc_compiler_get_declared_struct_member_size spvc_compiler_get_declared_struct_member_size;
    f_spvc_compiler_type_struct_member_offset spvc_compiler_type_struct_member_offset;
    f_spvc_compiler_type_struct_member_array_stride spvc_compiler_type_struct_member_array_stride;
    f_spvc_compiler_type_struct_member_matrix_stride spvc_compiler_type_struct_member_matrix_stride;
    f_spvc_compiler_build_dummy_sampler_for_combined_images spvc_compiler_build_dummy_sampler_for_combined_images;
    f_spvc_compiler_build_combined_image_samplers spvc_compiler_build_combined_image_samplers;
    f_spvc_compiler_get_combined_image_samplers spvc_compiler_get_combined_image_samplers;
    f_spvc_compiler_get_specialization_constants spvc_compiler_get_specialization_constants;
    f_spvc_compiler_get_constant_handle spvc_compiler_get_constant_handle;
    f_spvc_compiler_get_work_group_size_specialization_constants spvc_compiler_get_work_group_size_specialization_constants;
    f_spvc_compiler_get_active_buffer_ranges spvc_compiler_get_active_buffer_ranges;
    
    f_spvc_constant_get_scalar_fp16 spvc_constant_get_scalar_fp16;
    f_spvc_constant_get_scalar_fp32 spvc_constant_get_scalar_fp32;
    f_spvc_constant_get_scalar_fp64 spvc_constant_get_scalar_fp64;
    f_spvc_constant_get_scalar_u32 spvc_constant_get_scalar_u32;
    f_spvc_constant_get_scalar_i32 spvc_constant_get_scalar_i32;
    f_spvc_constant_get_scalar_u16 spvc_constant_get_scalar_u16;
    f_spvc_constant_get_scalar_i16 spvc_constant_get_scalar_i16;
    f_spvc_constant_get_scalar_u8 spvc_constant_get_scalar_u8;
    f_spvc_constant_get_scalar_i8 spvc_constant_get_scalar_i8;
    f_spvc_constant_get_subconstants spvc_constant_get_subconstants;
    f_spvc_constant_get_scalar_u64 spvc_constant_get_scalar_u64;
    f_spvc_constant_get_scalar_i64 spvc_constant_get_scalar_i64;
    f_spvc_constant_get_type spvc_constant_get_type;
    f_spvc_constant_set_scalar_fp16 spvc_constant_set_scalar_fp16;
    f_spvc_constant_set_scalar_fp32 spvc_constant_set_scalar_fp32;
    f_spvc_constant_set_scalar_fp64 spvc_constant_set_scalar_fp64;
    f_spvc_constant_set_scalar_u32 spvc_constant_set_scalar_u32;
    f_spvc_constant_set_scalar_i32 spvc_constant_set_scalar_i32;
    f_spvc_constant_set_scalar_u64 spvc_constant_set_scalar_u64;
    f_spvc_constant_set_scalar_i64 spvc_constant_set_scalar_i64;
    f_spvc_constant_set_scalar_u16 spvc_constant_set_scalar_u16;
    f_spvc_constant_set_scalar_i16 spvc_constant_set_scalar_i16;
    f_spvc_constant_set_scalar_u8 spvc_constant_set_scalar_u8;
    f_spvc_constant_set_scalar_i8 spvc_constant_set_scalar_i8;
    
    f_spvc_compiler_get_binary_offset_for_decoration spvc_compiler_get_binary_offset_for_decoration;
    f_spvc_compiler_buffer_is_hlsl_counter_buffer spvc_compiler_buffer_is_hlsl_counter_buffer;
    f_spvc_compiler_buffer_get_hlsl_counter_buffer spvc_compiler_buffer_get_hlsl_counter_buffer;
    f_spvc_compiler_get_declared_capabilities spvc_compiler_get_declared_capabilities;
    f_spvc_compiler_get_declared_extensions spvc_compiler_get_declared_extensions;
    f_spvc_compiler_get_remapped_declared_block_name spvc_compiler_get_remapped_declared_block_name;
    f_spvc_compiler_get_buffer_block_decorations spvc_compiler_get_buffer_block_decorations;
}

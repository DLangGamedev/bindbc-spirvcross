/*
Copyright (c) 2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.spirvcross.signatures;

import bindbc.spirvcross.types;

extern(C) @nogc nothrow:

alias f_spvc_get_version = void function(uint* major, uint* minor, uint* patch);
alias f_spvc_get_commit_revision_and_timestamp = const(char)* function();

alias f_spvc_msl_vertex_attribute_init = void function(spvc_msl_vertex_attribute* attr);
alias f_spvc_msl_shader_interface_var_init = void function(spvc_msl_shader_interface_var* var);
alias f_spvc_msl_shader_input_init = void function(spvc_msl_shader_input* input);
alias f_spvc_msl_shader_interface_var_init_2 = void function(spvc_msl_shader_interface_var_2* var);
alias f_spvc_msl_resource_binding_init = void function(spvc_msl_resource_binding* binding);
alias f_spvc_msl_resource_binding_init_2 = void function(spvc_msl_resource_binding_2* binding);
alias f_spvc_msl_get_aux_buffer_struct_version = uint function();
alias f_spvc_msl_constexpr_sampler_init = void function(spvc_msl_constexpr_sampler* sampler);
alias f_spvc_msl_sampler_ycbcr_conversion_init = void function(spvc_msl_sampler_ycbcr_conversion* conv);

alias f_spvc_hlsl_resource_binding_init = void function(spvc_hlsl_resource_binding* binding);

alias f_spvc_context_create = spvc_result function(spvc_context* context);
alias f_spvc_context_destroy = void function(spvc_context context);
alias f_spvc_context_release_allocations = void function(spvc_context context);
alias f_spvc_context_get_last_error_string = const(char)* function(spvc_context context);
alias f_spvc_context_set_error_callback = void function(spvc_context context, spvc_error_callback cb, void* userdata);
alias f_spvc_context_parse_spirv = spvc_result function(spvc_context context, const(SpvId)* spirv, size_t word_count, spvc_parsed_ir* parsed_ir);
alias f_spvc_context_create_compiler = spvc_result function(spvc_context context, spvc_backend backend, spvc_parsed_ir parsed_ir, spvc_capture_mode mode, spvc_compiler* compiler);

alias f_spvc_compiler_get_current_id_bound = uint function(spvc_compiler compiler);
alias f_spvc_compiler_create_compiler_options = spvc_result function(spvc_compiler compiler, spvc_compiler_options* options);
alias f_spvc_compiler_options_set_bool = spvc_result function(spvc_compiler_options options, spvc_compiler_option option, spvc_bool value);
alias f_spvc_compiler_options_set_uint = spvc_result function(spvc_compiler_options options, spvc_compiler_option option, uint value);
alias f_spvc_compiler_install_compiler_options = spvc_result function(spvc_compiler compiler, spvc_compiler_options options);
alias f_spvc_compiler_compile = spvc_result function(spvc_compiler compiler, const(char*)* source);
alias f_spvc_compiler_add_header_line = spvc_result function(spvc_compiler compiler, const(char)* line);
alias f_spvc_compiler_require_extension = spvc_result function(spvc_compiler compiler, const(char)* ext);
alias f_spvc_compiler_get_num_required_extensions = size_t function(spvc_compiler compiler);
alias f_spvc_compiler_get_required_extension = const(char)* function(spvc_compiler compiler, size_t index);
alias f_spvc_compiler_flatten_buffer_block = spvc_result function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_variable_is_depth_or_compare = spvc_bool function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_mask_stage_output_by_location = spvc_result function(spvc_compiler compiler, uint location, uint component);
alias f_spvc_compiler_mask_stage_output_by_builtin = spvc_result function(spvc_compiler compiler, SpvBuiltIn builtin);
alias f_spvc_compiler_hlsl_set_root_constants_layout = spvc_result function(spvc_compiler compiler, const(spvc_hlsl_root_constants)* constant_info, size_t count);
alias f_spvc_compiler_hlsl_add_vertex_attribute_remap = spvc_result function(spvc_compiler compiler, const(spvc_hlsl_vertex_attribute_remap)* remap, size_t remaps);
alias f_spvc_compiler_hlsl_remap_num_workgroups_builtin = spvc_variable_id function(spvc_compiler compiler);
alias f_spvc_compiler_hlsl_set_resource_binding_flags = spvc_result function(spvc_compiler compiler, spvc_hlsl_binding_flags flags);
alias f_spvc_compiler_hlsl_add_resource_binding = spvc_result function(spvc_compiler compiler, const(spvc_hlsl_resource_binding)* binding);
alias f_spvc_compiler_hlsl_is_resource_used = spvc_bool function(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding);
alias f_spvc_compiler_msl_is_rasterization_disabled = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_aux_buffer = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_swizzle_buffer = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_buffer_size_buffer = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_output_buffer = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_patch_output_buffer = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_needs_input_threadgroup_mem = spvc_bool function(spvc_compiler compiler);
alias f_spvc_compiler_msl_add_vertex_attribute = spvc_result function(spvc_compiler compiler, const(spvc_msl_vertex_attribute)* attrs);
alias f_spvc_compiler_msl_add_resource_binding = spvc_result function(spvc_compiler compiler, const(spvc_msl_resource_binding)* binding);
alias f_spvc_compiler_msl_add_resource_binding_2 = spvc_result function(spvc_compiler compiler, const(spvc_msl_resource_binding_2)* binding);
alias f_spvc_compiler_msl_add_shader_input = spvc_result function(spvc_compiler compiler, const(spvc_msl_shader_interface_var)* input);
alias f_spvc_compiler_msl_add_shader_input_2 = spvc_result function(spvc_compiler compiler, const(spvc_msl_shader_interface_var_2)* input);
alias f_spvc_compiler_msl_add_shader_output = spvc_result function(spvc_compiler compiler, const(spvc_msl_shader_interface_var)* output);
alias f_spvc_compiler_msl_add_shader_output_2 = spvc_result function(spvc_compiler compiler, const(spvc_msl_shader_interface_var_2)* output);
alias f_spvc_compiler_msl_add_discrete_descriptor_set = spvc_result function(spvc_compiler compiler, uint desc_set);
alias f_spvc_compiler_msl_set_argument_buffer_device_address_space = spvc_result function(spvc_compiler compiler, uint desc_set, spvc_bool device_address);
alias f_spvc_compiler_msl_is_vertex_attribute_used = spvc_bool function(spvc_compiler compiler, uint location);
alias f_spvc_compiler_msl_is_shader_input_used = spvc_bool function(spvc_compiler compiler, uint location);
alias f_spvc_compiler_msl_is_shader_output_used = spvc_bool function(spvc_compiler compiler, uint location);
alias f_spvc_compiler_msl_is_resource_used = spvc_bool function(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding);
alias f_spvc_compiler_msl_remap_constexpr_sampler = spvc_result function(spvc_compiler compiler, spvc_variable_id id, const(spvc_msl_constexpr_sampler)* sampler);
alias f_spvc_compiler_msl_remap_constexpr_sampler_by_binding = spvc_result function(spvc_compiler compiler, uint desc_set, uint binding, const(spvc_msl_constexpr_sampler)* sampler);
alias f_spvc_compiler_msl_remap_constexpr_sampler_ycbcr = spvc_result function(spvc_compiler compiler, spvc_variable_id id, const(spvc_msl_constexpr_sampler)* sampler, const(spvc_msl_sampler_ycbcr_conversion)* conv);
alias f_spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr = spvc_result function(spvc_compiler compiler, uint desc_set, uint binding, const(spvc_msl_constexpr_sampler)* sampler, const(spvc_msl_sampler_ycbcr_conversion)* conv);
alias f_spvc_compiler_msl_set_fragment_output_components = spvc_result function(spvc_compiler compiler, uint location, uint components);
alias f_spvc_compiler_msl_get_automatic_resource_binding = uint function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_msl_get_automatic_resource_binding_secondary = uint function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_msl_add_dynamic_buffer = spvc_result function(spvc_compiler compiler, uint desc_set, uint binding, uint index);
alias f_spvc_compiler_msl_add_inline_uniform_block = spvc_result function(spvc_compiler compiler, uint desc_set, uint binding);
alias f_spvc_compiler_msl_set_combined_sampler_suffix = spvc_result function(spvc_compiler compiler, const(char)* suffix);
alias f_spvc_compiler_msl_get_combined_sampler_suffix = const(char)* function(spvc_compiler compiler);
alias f_spvc_compiler_get_active_interface_variables = spvc_result function(spvc_compiler compiler, spvc_set* set);
alias f_spvc_compiler_set_enabled_interface_variables = spvc_result function(spvc_compiler compiler, spvc_set set);
alias f_spvc_compiler_create_shader_resources = spvc_result function(spvc_compiler compiler, spvc_resources* resources);
alias f_spvc_compiler_create_shader_resources_for_active_variables = spvc_result function(spvc_compiler compiler, spvc_resources* resources, spvc_set active);
alias f_spvc_resources_get_resource_list_for_type = spvc_result function(spvc_resources resources, spvc_resource_type type, const(spvc_reflected_resource*)* resource_list, size_t* resource_size);
alias f_spvc_resources_get_builtin_resource_list_for_type = spvc_result function(spvc_resources resources, spvc_builtin_resource_type type, const(spvc_reflected_builtin_resource*)* resource_list, size_t* resource_size);
alias f_spvc_compiler_set_decoration = void function(spvc_compiler compiler, SpvId id, SpvDecoration decoration, uint argument);
alias f_spvc_compiler_set_decoration_string = void function(spvc_compiler compiler, SpvId id, SpvDecoration decoration, const(char)* argument);
alias f_spvc_compiler_set_name = void function(spvc_compiler compiler, SpvId id, const(char)* argument);
alias f_spvc_compiler_set_member_decoration = void function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration, uint argument);
alias f_spvc_compiler_set_member_decoration_string = void function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration, const(char)* argument);
alias f_spvc_compiler_set_member_name = void function(spvc_compiler compiler, spvc_type_id id, uint member_index, const(char)* argument);
alias f_spvc_compiler_unset_decoration = void function(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
alias f_spvc_compiler_unset_member_decoration = void function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration);
alias f_spvc_compiler_has_decoration = spvc_bool function(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
alias f_spvc_compiler_has_member_decoration = spvc_bool function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration);
alias f_spvc_compiler_get_name = const(char)* function(spvc_compiler compiler, SpvId id);
alias f_spvc_compiler_get_decoration = uint function(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
alias f_spvc_compiler_get_decoration_string = const(char)* function(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
alias f_spvc_compiler_get_member_decoration = uint function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration);
alias f_spvc_compiler_get_member_decoration_string = const(char)* function(spvc_compiler compiler, spvc_type_id id, uint member_index, SpvDecoration decoration);
alias f_spvc_compiler_get_member_name = const(char)* function(spvc_compiler compiler, spvc_type_id id, uint member_index);
alias f_spvc_compiler_get_entry_points = spvc_result function(spvc_compiler compiler, const(spvc_entry_point*)* entry_points, size_t* num_entry_points);
alias f_spvc_compiler_set_entry_point = spvc_result function(spvc_compiler compiler, const(char)* name, SpvExecutionModel model);
alias f_spvc_compiler_rename_entry_point = spvc_result function(spvc_compiler compiler, const(char)* old_name, const(char)* new_name, SpvExecutionModel model);
alias f_spvc_compiler_get_cleansed_entry_point_name = const(char)* function(spvc_compiler compiler, const(char)* name, SpvExecutionModel model);
alias f_spvc_compiler_set_execution_mode = void function(spvc_compiler compiler, SpvExecutionMode mode);
alias f_spvc_compiler_unset_execution_mode = void function(spvc_compiler compiler, SpvExecutionMode mode);
alias f_spvc_compiler_set_execution_mode_with_arguments = void function(spvc_compiler compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2);
alias f_spvc_compiler_get_execution_modes = spvc_result function(spvc_compiler compiler, const(SpvExecutionMode*)* modes, size_t* num_modes);
alias f_spvc_compiler_get_execution_mode_argument = uint function(spvc_compiler compiler, SpvExecutionMode mode);
alias f_spvc_compiler_get_execution_mode_argument_by_index = uint function(spvc_compiler compiler, SpvExecutionMode mode, uint index);
alias f_spvc_compiler_get_execution_model = SpvExecutionModel function(spvc_compiler compiler);
alias f_spvc_compiler_update_active_builtins = void function(spvc_compiler compiler);
alias f_spvc_compiler_has_active_builtin = spvc_bool function(spvc_compiler compiler, SpvBuiltIn builtin, SpvStorageClass storage);
alias f_spvc_compiler_get_type_handle = spvc_type function(spvc_compiler compiler, spvc_type_id id);

alias f_spvc_type_get_base_type_id = spvc_type_id function(spvc_type type);
alias f_spvc_type_get_basetype = spvc_basetype function(spvc_type type);
alias f_spvc_type_get_bit_width = uint function(spvc_type type);
alias f_spvc_type_get_vector_size = uint function(spvc_type type);
alias f_spvc_type_get_columns = uint function(spvc_type type);
alias f_spvc_type_get_num_array_dimensions = uint function(spvc_type type);
alias f_spvc_type_array_dimension_is_literal = spvc_bool function(spvc_type type, uint dimension);
alias f_spvc_type_get_array_dimension = SpvId function(spvc_type type, uint dimension);
alias f_spvc_type_get_num_member_types = uint function(spvc_type type);
alias f_spvc_type_get_member_type = spvc_type_id function(spvc_type type, uint index);
alias f_spvc_type_get_storage_class = SpvStorageClass function(spvc_type type);
alias f_spvc_type_get_image_sampled_type = spvc_type_id function(spvc_type type);
alias f_spvc_type_get_image_dimension = SpvDim function(spvc_type type);
alias f_spvc_type_get_image_is_depth = spvc_bool function(spvc_type type);
alias f_spvc_type_get_image_arrayed = spvc_bool function(spvc_type type);
alias f_spvc_type_get_image_multisampled = spvc_bool function(spvc_type type);
alias f_spvc_type_get_image_is_storage = spvc_bool function(spvc_type type);
alias f_spvc_type_get_image_storage_format = SpvImageFormat function(spvc_type type);
alias f_spvc_type_get_image_access_qualifier = SpvAccessQualifier function(spvc_type type);

alias f_spvc_compiler_get_declared_struct_size = spvc_result function(spvc_compiler compiler, spvc_type struct_type, size_t* size);
alias f_spvc_compiler_get_declared_struct_size_runtime_array = spvc_result function(spvc_compiler compiler, spvc_type struct_type, size_t array_size, size_t* size);
alias f_spvc_compiler_get_declared_struct_member_size = spvc_result function(spvc_compiler compiler, spvc_type type, uint index, size_t* size);
alias f_spvc_compiler_type_struct_member_offset = spvc_result function(spvc_compiler compiler, spvc_type type, uint index, uint* offset);
alias f_spvc_compiler_type_struct_member_array_stride = spvc_result function(spvc_compiler compiler, spvc_type type, uint index, uint* stride);
alias f_spvc_compiler_type_struct_member_matrix_stride = spvc_result function(spvc_compiler compiler, spvc_type type, uint index, uint* stride);
alias f_spvc_compiler_build_dummy_sampler_for_combined_images = spvc_result function(spvc_compiler compiler, spvc_variable_id* id);
alias f_spvc_compiler_build_combined_image_samplers = spvc_result function(spvc_compiler compiler);
alias f_spvc_compiler_get_combined_image_samplers = spvc_result function(spvc_compiler compiler, const(spvc_combined_image_sampler*)* samplers, size_t* num_samplers);
alias f_spvc_compiler_get_specialization_constants = spvc_result function(spvc_compiler compiler, const(spvc_specialization_constant*)* constants, size_t* num_constants);
alias f_spvc_compiler_get_constant_handle = spvc_constant function(spvc_compiler compiler, spvc_constant_id id);
alias f_spvc_compiler_get_work_group_size_specialization_constants = spvc_constant_id function(spvc_compiler compiler, spvc_specialization_constant* x, spvc_specialization_constant* y, spvc_specialization_constant* z);
alias f_spvc_compiler_get_active_buffer_ranges = spvc_result function(spvc_compiler compiler, spvc_variable_id id, const(spvc_buffer_range*)* ranges, size_t* num_ranges);

alias f_spvc_constant_get_scalar_fp16 = float function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_fp32 = float function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_fp64 = double function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_u32 = uint function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_i32 = int function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_u16 = uint function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_i16 = int function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_u8 = uint function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_i8 = int function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_subconstants = void function(spvc_constant constant, const(spvc_constant_id*)* constituents, size_t* count);
alias f_spvc_constant_get_scalar_u64 = ulong function(spvc_constant constant, uint column, uint row);
alias f_spvc_constant_get_scalar_i64 = long function(spvc_constant constant, uint column, uint row);

alias f_spvc_constant_get_type = spvc_type_id function(spvc_constant constant);
alias f_spvc_constant_set_scalar_fp16 = void function(spvc_constant constant, uint column, uint row, ushort value);
alias f_spvc_constant_set_scalar_fp32 = void function(spvc_constant constant, uint column, uint row, float value);
alias f_spvc_constant_set_scalar_fp64 = void function(spvc_constant constant, uint column, uint row, double value);
alias f_spvc_constant_set_scalar_u32 = void function(spvc_constant constant, uint column, uint row, uint value);
alias f_spvc_constant_set_scalar_i32 = void function(spvc_constant constant, uint column, uint row, int value);
alias f_spvc_constant_set_scalar_u64 = void function(spvc_constant constant, uint column, uint row, ulong value);
alias f_spvc_constant_set_scalar_i64 = void function(spvc_constant constant, uint column, uint row, long value);
alias f_spvc_constant_set_scalar_u16 = void function(spvc_constant constant, uint column, uint row, ushort value);
alias f_spvc_constant_set_scalar_i16 = void function(spvc_constant constant, uint column, uint row, short value);
alias f_spvc_constant_set_scalar_u8 = void function(spvc_constant constant, uint column, uint row, ubyte value);
alias f_spvc_constant_set_scalar_i8 = void function(spvc_constant constant, uint column, uint row, byte value);

alias f_spvc_compiler_get_binary_offset_for_decoration = spvc_bool function(spvc_compiler compiler, spvc_variable_id id, SpvDecoration decoration, uint* word_offset);
alias f_spvc_compiler_buffer_is_hlsl_counter_buffer = spvc_bool function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_buffer_get_hlsl_counter_buffer = spvc_bool function(spvc_compiler compiler, spvc_variable_id id, spvc_variable_id* counter_id);

alias f_spvc_compiler_get_declared_capabilities = spvc_result function(spvc_compiler compiler, const(SpvCapability*)* capabilities, size_t* num_capabilities);

alias f_spvc_compiler_get_declared_extensions = spvc_result function(spvc_compiler compiler, const(char**)* extensions, size_t* num_extensions);
alias f_spvc_compiler_get_remapped_declared_block_name = const(char)* function(spvc_compiler compiler, spvc_variable_id id);
alias f_spvc_compiler_get_buffer_block_decorations = spvc_result function(spvc_compiler compiler, spvc_variable_id id, const(SpvDecoration*)* decorations, size_t* num_decorations);
